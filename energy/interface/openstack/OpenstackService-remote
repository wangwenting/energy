#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from energy.interface.openstack import OpenstackService
from energy.interface.openstack.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string get_openstack_config(string request)')
  print('  string set_openstack_config(string request)')
  print('  string get_openstack_host_usage(string request)')
  print('  string get_openstack_host_usage_all(string request)')
  print('  string thermal_low_temp_host_select(string request)')
  print('  string cups_low_workload_host_select(string request)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = OpenstackService.Client(protocol)
transport.open()

if cmd == 'get_openstack_config':
  if len(args) != 1:
    print('get_openstack_config requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_openstack_config(args[0],))

elif cmd == 'set_openstack_config':
  if len(args) != 1:
    print('set_openstack_config requires 1 args')
    sys.exit(1)
  pp.pprint(client.set_openstack_config(args[0],))

elif cmd == 'get_openstack_host_usage':
  if len(args) != 1:
    print('get_openstack_host_usage requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_openstack_host_usage(args[0],))

elif cmd == 'get_openstack_host_usage_all':
  if len(args) != 1:
    print('get_openstack_host_usage_all requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_openstack_host_usage_all(args[0],))

elif cmd == 'thermal_low_temp_host_select':
  if len(args) != 1:
    print('thermal_low_temp_host_select requires 1 args')
    sys.exit(1)
  pp.pprint(client.thermal_low_temp_host_select(args[0],))

elif cmd == 'cups_low_workload_host_select':
  if len(args) != 1:
    print('cups_low_workload_host_select requires 1 args')
    sys.exit(1)
  pp.pprint(client.cups_low_workload_host_select(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
